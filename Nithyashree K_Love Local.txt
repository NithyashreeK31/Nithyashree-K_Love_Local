1. Given a string s consisting of words and spaces, return the length of the last word in the string.
   A word is a maximal, substring consisting of non-space characters only.
   
import java.util.*;
import java.util.Scanner;

public class LastWordLength {
    public static int lengthOfLastWord(String s) {
        s = s.trim();                                // Trim the input string to remove leading and trailing spaces

        int lastSpaceIndex = s.lastIndexOf(' ');     // Find the last space in the trimmed string

        if (lastSpaceIndex == -1) {
            return s.length();
        }                                           // If there is no space, the entire string is the last word

        return s.length() - lastSpaceIndex - 1;     // Return the length of the last word by subtracting the last space
                                                   // index from the string length
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter a string: ");
        String userInput = scanner.nextLine();
        int result = lengthOfLastWord(userInput);
        System.out.println("Length of the last word: " + result);
    }
}


2. Given an integer array of size n, find all elements that appear more than ⌊ n/3 ⌋ times.

import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Majority {

    static List<Integer> findMajority(int[] nums) {
        List<Integer> result = new ArrayList<>();

        if (nums == null || nums.length == 0) {
            return result;
        }

        int candidate1 = 0, candidate2 = 0;
        int count1 = 0, count2 = 0;

        for (int num : nums) {
            if (num == candidate1) {
                count1++;
            } else if (num == candidate2) {
                count2++;
            } else if (count1 == 0) {
                candidate1 = num;
                count1 = 1;
            } else if (count2 == 0) {
                candidate2 = num;
                count2 = 1;
            } else {
                count1--;
                count2--;
            }
        }

        count1 = count2 = 0;					// Verify candidates
        for (int num : nums) {
            if (num == candidate1) {
                count1++;
            } else if (num == candidate2) {
                count2++;
            }
        }

       
        if (count1 > nums.length / 3) {				// Check if candidates are majority elements
            result.add(candidate1);
        }
        if (count2 > nums.length / 3) {
            result.add(candidate2);
        }

        return result;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter the array (e.g., [1,2,3]): ");	// Prompt the user to enter the array in the format [1,2,3]
        String input = scanner.nextLine();

        Pattern pattern = Pattern.compile("\\d+");		// Extract integers using regular expression
        Matcher matcher = pattern.matcher(input);

        List<Integer> elements = new ArrayList<>();
        while (matcher.find()) {
            elements.add(Integer.parseInt(matcher.group()));
        }

        int[] nums = elements.stream().mapToInt(Integer::intValue).toArray();    // Convert the list to an array

        List<Integer> result = findMajority(nums);		// Function calling

        System.out.println("Output: " + result);		 // Display the result

        scanner.close();
    }
}

3. Given an integer n, count the total number of digit 1 appearing in all non-negative integers less than or equal to n. java code for   user input

import java.util.Scanner;

public class CountDigitOne {

    static int countDigitOne(int n) {
        if (n <= 0) {
            return 0;
        }

        int count = 0;
        for (int i = 1; i <= n; i++) {
            count += countOnes(i);
        }

        return count;
    }

    static int countOnes(int num) {
        int count = 0;
        while (num > 0) {
            if (num % 10 == 1) {
                count++;
            }
            num /= 10;
        }
        return count;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter an integer (n): ");		// Prompt the user to enter an integer
        int n = scanner.nextInt();

        int result = countDigitOne(n);				// Calculate the total number of digit 1

        System.out.println("Total number of digit 1 in integers up to " + n + ": " + result);	// Display the result

        scanner.close();
    }
}


